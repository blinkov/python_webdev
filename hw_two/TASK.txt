Подготовка:
- Ознакомьтесь с описанием проекта, составленным Вашим коллегой (если запутались где чье задание - пишите, помогу разобраться)
- Придумайте английское название проекта, создайте одноименный репозиторий на GitHub
- Киньте ссылку на свежий репозиторий в группу, чтобы все желающие (в первую очередь я) могли подписаться на обновления
- Пройдитесь еще раз по технологиям, выбери те, c которыми тебе просто _комфортнее_ работать, то есть пока особо не задумываемся об уместности и эффективности - оптимизировать будем потом


Обязательное задание:
- Настроить выбранный web framework до уровня "Hello, world!"
- Настроить маршрутизацию URL, по поводу регулярных выражений в Интернете полно мануалов
- Сверстать базовый шаблон и все основные страницы (дизайн не важен, главное чтобы себя и коллег не тошнило от внешнего вида)
- Разработать схему данных для специфичных частей проекта с использованием любой "ORM" и СУБД, не требующей установки (рекомендую SQLite для SQL или BerkleyDB для NoSQL), если прямо сильно хочется какой-то другой NoSQL или не использовать ORM - ок, но пока никаких MySQL/PostgreSQL.
- Реализовать весь типовой функционал, который запланирован, с использованием любых библиотек, минимум это: регистрация, активация по почте (можно пока не заморачваться с настройкой почты - просто активирующая страница с уникальным URL), авторизация, восстановление пароля, профили пользователей - остальное по описанию проекта

Дополнительное задание:
- Реализовать саму специфику проекта

Требования:
- Проект должен работать без установки внешнего софта (СУБД, веб-сервер и.т.п.) Возможны исключения, лучше согласовать со мной.
- Наверняка будут Python-библиотеки, от которых зависит проект - их список нужно положить в файл requirements.txt, который можно сгенерировать через pip freeze и выкинув потом лишнее.


Рекомендации:
- Сейчас мы концентрируемся только на функционале!
- Качество, производительность, безопасность, эффективность и прочее - будем допиливать потом.
- Весь функционал должен быть готов, хоть как-то, хотя бы "на троечку". Если что-то не успеваете из "дополнительного" - по-умолчанию доделываете к следующему разу.
- Очень сильно не рекомендую пользоваться Django - он хорош для демонстрации, но не для собственно обучения. Если кто-то хочет все же использовать его - пусть пришлет мне на почту аргументацию и я его отговорю :)
- Обращайтесь ко мне по почте или к коллегам по всем вопросам по теме и старайтесь максимально часто публиковать промежуточные результаты - я буду стараться по возможности комментировать по ходу дела, говорить что исправить, чтобы работа была принята.
- Автор описания проекта является по сути заказчиком, используйте его для получения более детальной информации по специфике, если она по каким-то причинам не была указана в тексте описания
